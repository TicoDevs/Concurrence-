import java.util.concurrent.ConcurrentLinkedQueue;

// Clase que representa a un cliente, con un array de enteros que indica los productos que ha comprado
class Cliente {
  int[] productos;

  // Constructor que recibe el array de productos
  public Cliente(int[] productos) {
    this.productos = productos;
  }
}

// Clase que representa a un vendedor, que implementa la interfaz Runnable para poder ejecutarse como un hilo
class Vendedor implements Runnable {
  // Atributo que indica el número de la caja registradora
  int numero;

  // Atributo que indica la cola de clientes que espera ser atendida por este vendedor
  ConcurrentLinkedQueue<Cliente> cola;

  // Constructor que recibe el número de la caja y la cola de clientes
  public Vendedor(int numero, ConcurrentLinkedQueue<Cliente> cola) {
    this.numero = numero;
    this.cola = cola;
  }

  // Método que se ejecuta cuando se inicia el hilo
  public void run() {
    // Mientras haya clientes en la cola
    while (!cola.isEmpty()) {
      // Sacar al primer cliente de la cola
      Cliente cliente = cola.poll();
      // Mostrar un mensaje indicando que se va a atender al cliente
      System.out.println("El vendedor " + numero + " va a atender al cliente " + cliente);
      // Obtener el array de productos del cliente
      int[] productos = cliente.productos;
      // Recorrer el array de productos
      for (int i = 0; i < productos.length; i++) {
        // Obtener el producto actual
        int producto = productos[i];
        // Mostrar un mensaje indicando que se va a procesar el producto
        System.out.println("El vendedor " + numero + " va a procesar el producto " + producto);
        // Obtener el tiempo actual en milisegundos
        long tiempo = System.currentTimeMillis();
        // Simular que se tarda 2 segundos en procesar el producto
        try {
          Thread.sleep(2000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        // Mostrar un mensaje indicando que se ha procesado el producto y el tiempo que se ha tardado
        System.out.println("El vendedor " + numero + " ha procesado el producto " + producto + " en " + (System.currentTimeMillis() - tiempo) + " milisegundos");
      }
      // Mostrar un mensaje indicando que se ha terminado de atender al cliente
      System.out.println("El vendedor " + numero + " ha terminado de atender al cliente " + cliente);
    }
    // Mostrar un mensaje indicando que no hay más clientes en la cola
    System.out.println("El vendedor " + numero + " no tiene más clientes en la cola");
  }
}

// Clase principal que contiene el método main
public class Supermercado {
  // Método principal que se ejecuta al iniciar el programa
  public static void main(String[] args) {
    // Crear una cola de clientes con algunos ejemplos
    ConcurrentLinkedQueue<Cliente> cola = new ConcurrentLinkedQueue<>();
    cola.offer(new Cliente(new int[]{1, 3, 5, 8}));
    cola.offer(new Cliente(new int[]{2, 4, 6, 9}));
    cola.offer(new Cliente(new int[]{7, 10, 11, 12}));

    // Crear dos vendedores que atienden la misma cola de clientes
    Vendedor vendedor1 = new Vendedor(1, cola);
    Vendedor vendedor2 = new Vendedor(2, cola);

    // Crear dos hilos para ejecutar los vendedores
    Thread hilo1 = new Thread(vendedor1);
    Thread hilo2 = new Thread(vendedor2);

    // Iniciar los hilos
    hilo1.start();
    hilo2.start();

    // Esperar a que los hilos terminen
    try {
      hilo1.join();
      hilo2.join();
    } catch (InterruptedException e) {
      e.printStackTrace();
    }

    // Mostrar un mensaje indicando que el programa ha terminado
    System.out.println("El programa ha terminado");
  }
}
